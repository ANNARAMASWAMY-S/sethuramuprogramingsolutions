Step 1: Understand Asymptotic Notation
What is Big O Notation?
Big O notation describes the upper bound of an algorithm’s running time. It gives an idea of how the performance (time or space) of an algorithm scales with input size.

Common Big O notations:

O(1): Constant time

O(log n): Logarithmic time

O(n): Linear time

O(n log n): Log-linear time

O(n²): Quadratic time

Best, Average, and Worst Case
For search operations:

Search Type	    BestCase	  Average Case	  Worst Case
Linear Search	    O(1) 	        O(n)	        O(n)
Binary Search	    O(1)	        O(log n)	  O(log n)




Time Complexity

Algorithm	Time Complexity	Requirement
Linear Search	O(n)	Unsorted array
Binary Search	O(log n)	Sorted array needed

Which is Better?
Binary search is faster than linear search for large, sorted datasets.

If your platform allows you to keep the product list sorted (e.g., by name or ID), then binary search is much more efficient.

Use linear search if:

The dataset is small.

The data is unsorted and changes frequently.
